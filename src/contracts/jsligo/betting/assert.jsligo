#import "types.jsligo" "Types"
#import "errors.jsligo" "Errors"

// --------------------------------------
//       CONFIG RELATED ASSERTIONS
// --------------------------------------

export const isManager = (p_sender : address, p_manager : address) => {
  if (p_sender != p_manager) {return failwith(Errors.not_manager)}
  };

export const isManagerOrOracle = (p_sender : address, p_manager : address, p_oracle : address) => {
  if ((p_sender != p_manager) && (p_sender != p_oracle) ) {return failwith(Errors.not_manager_nor_oracle)}
  };

export const notManagerNorOracle = (p_sender : address, p_manager : address, p_oracle : address) => {
  if ((p_sender == p_manager) || (p_sender == p_oracle) ) {return failwith(Errors.not_manager_nor_oracle)}
  };

export const notPreviousManager = (p_new_manager : address, p_prev_manager : address) => {
  if (p_new_manager == p_prev_manager) {return failwith(Errors.same_previous_manager)}
  };

export const notPreviousOracle = (p_new_oracle : address, p_prev_oracle : address) => {
  if (p_new_oracle == p_prev_oracle) {return failwith(Errors.same_previous_oracle)}
  };

// --------------------------------------
//         EVENT RELATED ASSERTIONS
// --------------------------------------

export const eventCreationNotPaused = (p_event_creation_paused : bool) => {
  if (p_event_creation_paused) {return failwith(Errors.event_creation_paused)}
  };

export const eventStartToEndDate = (p_event_start : timestamp, p_event_end : timestamp) => {
  if (p_event_start > p_event_end) {return failwith(Errors.event_end_before_start)}
  };

export const eventBetStartToEndDate = (p_event_bet_start : timestamp, p_event_bet_end : timestamp) => {
  if (p_event_bet_start > p_event_bet_end) {return failwith(Errors.event_betting_end_before_start)}
  };

export const eventBetStartAfterEnd = (p_event_bet_start : timestamp, p_event_end : timestamp) => {
  if (p_event_bet_start > p_event_end) {return failwith(Errors.event_betting_start_after_end)}
  };

export const eventBetEndsAfterEnd = (p_event_bet_end : timestamp, p_event_end : timestamp) => {
  if (p_event_bet_end > p_event_end) {return failwith(Errors.event_betting_end_after_end)}
  };

// --------------------------------------
//         BETTING RELATED ASSERTIONS
// --------------------------------------

export const bettingNotPaused = (p_betting_paused : bool) => {
  if (p_betting_paused) {return failwith(Errors.betting_paused)}
  };

export const bettingNotFinalized = (p : Types.gameStatus) =>
  match (p) {
    when(Ongoing(c)): c;
    when(Team1Win()): failwith(Errors.bet_finished);
    when(Team2Win()): failwith(Errors.bet_finished);
    when(Draw()): failwith(Errors.bet_finished);
  };

export const bettingFinalized = (p : Types.gameStatus) =>
  match (p) {
    when(Ongoing()): failwith(Errors.bet_not_finished);
    when(Team1Win(c)): c;
    when(Team2Win(c)): c;
    when(Draw(c)): c;
  };

export const noTez = (p_asserted_amount : tez) => {
  if (p_asserted_amount == 0mutez) {return failwith(Errors.bet_with_noTez)}
  };

export const tezLowerThanMin = (p_asserted_amount : tez, p_asserted_min_value : tez) => {
  if (p_asserted_amount < p_asserted_min_value) {return failwith(Errors.bet_lower_than_minimum)}
  };

export const bettingBeforePeriodStart = (p_start_at : timestamp) => {
  if (p_start_at > (Tezos.get_now())) {return failwith(Errors.bet_period_not_started)}
  };

export const bettingAfterPeriodEnd = (p_endAt : timestamp) => {
  if (p_endAt < (Tezos.get_now())) {return failwith(Errors.bet_period_finished)}
  };

export const finalizingBeforePeriodEnd = (p_endAt : timestamp) => {
  if (p_endAt > (Tezos.get_now())) {return failwith(Errors.bet_period_not_finished)}
  };

export const betIsDraw = (p_is_draw : bool) => {
  if (p_is_draw) {return failwith(Errors.bet_ended_as_draw)}
  };