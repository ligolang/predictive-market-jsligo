#import "../types.jsligo" "BETTING_Types"

export type storage =
  [@layout:comb] {
  name : string,
  videogame : string,
  beginAt : timestamp,
  endAt : timestamp,
  modifiedAt : timestamp,
  opponents : { teamOne : string, teamTwo : string},
  gameStatus : BETTING_Types.gameStatus,
  start_bet_time : timestamp,
  closed_bet_time : timestamp,
  bets_teamOne : map <address, tez>,
  bets_teamOne_index : nat,
  bets_teamOne_total : tez,
  bets_teamTwo : map <address, tez>,
  bets_teamTwo_index : nat,
  bets_teamTwo_total : tez,
  meta : map <string, bytes>,
  bettingAddr : address
  };

export type requested_event_param =
  [@layout:comb] {
  name : string,
  videogame : string,
  beginAt : timestamp,
  endAt : timestamp,
  modifiedAt : timestamp,
  opponents : { teamOne : string, teamTwo : string},
  gameStatus : BETTING_Types.gameStatus,
  start_bet_time : timestamp,
  closed_bet_time : timestamp,
  bets_teamOne : map <address, tez>,
  bets_teamOne_index : nat,
  bets_teamOne_total : tez,
  bets_teamTwo : map <address, tez>,
  bets_teamTwo_index : nat,
  bets_teamTwo_total : tez,
};

type return_ = [list<operation>, storage];

@entry
const saveEvent = (param: requested_event_param, store : storage) : return_ =>
  [list([]),  {...store,
    name : param.name,
    videogame : param.videogame,
    beginAt : param.beginAt,
    endAt : param.endAt,
    modifiedAt : param.modifiedAt,
    opponents : param.opponents,
    gameStatus : param.gameStatus,
    start_bet_time : param.start_bet_time,
    closed_bet_time : param.closed_bet_time,
    bets_teamOne : param.bets_teamOne,
    bets_teamOne_index : param.bets_teamOne_index,
    bets_teamOne_total : param.bets_teamOne_total,
    bets_teamTwo : param.bets_teamTwo,
    bets_teamTwo_index : param.bets_teamTwo_index,
    bets_teamTwo_total : param.bets_teamTwo_total
  }];

@entry
const requestEvent = (param: nat, store : storage) : return_ => {
  let payload = {
    requestedEventId : param,
    callback : Tezos.get_self_address()
  };
  let c_opt = Tezos.get_entrypoint_opt("%getEvent", store.bettingAddr);
  let destination = match (c_opt) {
    when(Some(c)): c;
    when(None()): (failwith("missing_entrypoint_sendvalue") as contract<BETTING_Types.callback_asked_parameter>);
  };
  let op = Tezos.transaction(payload, 0mutez, destination);
  return [list([op]), store]
};