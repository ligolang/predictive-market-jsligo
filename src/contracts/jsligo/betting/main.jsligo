#import "types.jsligo" "Types"
#import "errors.jsligo" "Errors"
#import "assert.jsligo" "Assert"
#import "callback/main.jsligo" "Callback"

@entry
const changeManager = (pNewManager: address, s: Types.storage) : Types.return_ => {
  Assert.isManager (Tezos.get_sender(), s.manager);
  Assert.notPreviousManager (pNewManager, s.manager);
  return [list([]), {...s, manager:pNewManager}]
};

@entry
const changeOracleAddress = (p_new_oracle_address: address, s: Types.storage) : Types.return_ => {
  Assert.isManager (Tezos.get_sender(), s.manager);
  Assert.notPreviousOracle (p_new_oracle_address, s.oracle_address);
  return [list([]), {...s, oracle_address: p_new_oracle_address}]
};

@entry
const switchPauseEventCreation = (_ : unit, s : Types.storage) : Types.return_ => {
  Assert.isManager (Tezos.get_sender(), s.manager);
  return [list([]), {...s, bet_config : {...s.bet_config, is_event_creation_paused: !s.bet_config.is_event_creation_paused }}]
};

@entry
const switchPauseBetting = (_ : unit, s : Types.storage) : Types.return_ => {
  Assert.isManager (Tezos.get_sender(), s.manager);
  return [list([]), {...s, bet_config : {...s.bet_config, is_betting_paused: !s.bet_config.is_betting_paused }}]
};

@entry
const updateConfigType = (p_new_bet_config : Types.bet_config_type, s : Types.storage) : Types.return_ => {
  Assert.isManager (Tezos.get_sender(), s.manager);
  return [list([]), {...s, bet_config : p_new_bet_config}]
};

@entry
const addEvent = (p_new_event : Types.add_event_parameter, s : Types.storage) : Types.return_ => {
  //TODO
  Assert.isManagerOrOracle( (Tezos.get_sender()), s.manager, s.oracle_address);
  Assert.eventCreationNotPaused(s.bet_config.is_event_creation_paused);
  Assert.eventStartToEndDate(p_new_event.beginAt, p_new_event.endAt);
  Assert.eventBetStartToEndDate(p_new_event.start_bet_time, p_new_event.closed_bet_time);
  Assert.eventBetStartAfterEnd(p_new_event.start_bet_time, p_new_event.endAt);
  Assert.eventBetEndsAfterEnd(p_new_event.closed_bet_time, p_new_event.endAt);
  let new_event : Types.event_type = {
    name : p_new_event.name,
    videogame :  p_new_event.videogame,
    beginAt : p_new_event.beginAt,
    endAt : p_new_event.endAt,
    modifiedAt : p_new_event.modifiedAt,
    opponents : p_new_event.opponents,
    gameStatus : Ongoing(),
    start_bet_time : p_new_event.start_bet_time,
    closed_bet_time : p_new_event.closed_bet_time,
    is_claimed : false };
  let new_events = Big_map.add(s.eventsIndex, new_event, s.events);
  let new_event_bet = {
    bets_teamOne : (Map.empty as map <address, tez>),
    bets_teamOne_index : 0n,
    bets_teamOne_total : 0mutez,
    bets_teamTwo : (Map.empty as map <address, tez>),
    bets_teamTwo_index : 0n,
    bets_teamTwo_total : 0mutez
  };
  let new_events_bets = Big_map.add(s.eventsIndex, new_event_bet, s.events_bets);
  return [list([]), {...s, events : new_events, events_bets : new_events_bets, eventsIndex : s.eventsIndex + 1n }]
};

@entry
const getEvent = ([requestedEventId, callbackAddr] : [nat, address], s : Types.storage) : Types.return_ => {
  //TODO
  let cbk_event = match((Big_map.find_opt(requestedEventId, s.events))) {
    when(Some(event)): event;
    when(None()): failwith(Errors.no_event_id);
  };
  let cbk_eventbet = match((Big_map.find_opt(requestedEventId, s.events_bets))) {
    when(Some(eventbet)): eventbet;
    when(None()): failwith(Errors.no_event_id);
  };
  let payload : Callback.requested_event_param = {
    name : cbk_event.name,
    videogame : cbk_event.videogame,
    beginAt : cbk_event.beginAt,
    endAt : cbk_event.endAt,
    modifiedAt : cbk_event.modifiedAt,
    opponents : { teamOne : cbk_event.opponents.teamOne, teamTwo : cbk_event.opponents.teamTwo},
    gameStatus : cbk_event.gameStatus,
    start_bet_time : cbk_event.start_bet_time,
    closed_bet_time : cbk_event.closed_bet_time,
    bets_teamOne : cbk_eventbet.bets_teamOne,
    bets_teamOne_index : cbk_eventbet.bets_teamOne_index,
    bets_teamOne_total : cbk_eventbet.bets_teamOne_total,
    bets_teamTwo : cbk_eventbet.bets_teamTwo,
    bets_teamTwo_index : cbk_eventbet.bets_teamTwo_index,
    bets_teamTwo_total : cbk_eventbet.bets_teamTwo_total
  };
  // TODO
  let destination =
    match((Tezos.get_entrypoint_opt("%saveEvent", callbackAddr) as option<contract<Callback.requested_event_param>>)) {
      when(None()): failwith("Unknown contract");
      when(Some(ctr)): ctr;
    };
  let op = Tezos.transaction(payload, 0mutez, destination);
  return [list([op]), s]
};

@entry
const updateEvent = ([updatedEventId, updatedEvent] : [nat, Types.event_type], s : Types.storage) : Types.return_ => {
  //TODO
  Assert.isManagerOrOracle((Tezos.get_sender()), s.manager, s.oracle_address);
  Assert.eventStartToEndDate(updatedEvent.beginAt,updatedEvent.endAt);
  Assert.eventBetStartToEndDate(updatedEvent.start_bet_time,updatedEvent.closed_bet_time);
  Assert.eventBetStartAfterEnd(updatedEvent.start_bet_time,updatedEvent.endAt);
  Assert.eventBetEndsAfterEnd(updatedEvent.closed_bet_time,updatedEvent.endAt);
  let requested_event = match((Big_map.find_opt(updatedEventId, s.events))) {
    when(Some(event)): event;
    when(None()): failwith(Errors.no_event_id);
    };
  Assert.bettingNotFinalized (requested_event.gameStatus);
  let new_events = Big_map.update(updatedEventId, (Some(updatedEvent)), s.events);
  return [list([]), {...s, events : new_events }]
};

const add_bet_teamOne_amount_to_existing_user = (p_requestedEventBets : Types.event_bets, pPreviousAmount : tez) => {
  //TODO
  let p_new_bets_teamOne = Map.update((Tezos.get_sender()), (Some(pPreviousAmount + Tezos.get_amount())), p_requestedEventBets.bets_teamOne);
  return [p_new_bets_teamOne, p_requestedEventBets.bets_teamOne_index]
};

const add_bet_teamOne_amount_to_new_user = (p_requestedEventBets : Types.event_bets) => {
  //TODO
  let p_new_bets_teamOne = Map.add((Tezos.get_sender()), (Tezos.get_amount()), p_requestedEventBets.bets_teamOne);
  let p_new_bets_teamOne_index = p_requestedEventBets.bets_teamOne_index + 1n;
  return [p_new_bets_teamOne, p_new_bets_teamOne_index]
};

const add_bet_teamOne = (p_requestedEventBets : Types.event_bets) : Types.event_bets => {
  //TODO
  let [new_bets_teamOne, new_bets_teamOne_index] = match ((Map.find_opt(Tezos.get_sender(), p_requestedEventBets.bets_teamOne))) {
    when(Some(prevAmount)): add_bet_teamOne_amount_to_existing_user(p_requestedEventBets, prevAmount);
    when(None()): add_bet_teamOne_amount_to_new_user(p_requestedEventBets);
  };
  let new_bets_teamOne_total = (p_requestedEventBets.bets_teamOne_total + Tezos.get_amount());
  let r_updatedEvent = {...p_requestedEventBets, bets_teamOne : new_bets_teamOne, bets_teamOne_index : new_bets_teamOne_index, bets_teamOne_total : new_bets_teamOne_total};
  return r_updatedEvent
};

const add_bet_teamTwo_amount_to_existing_user = (p_requestedEventBets : Types.event_bets, pPreviousAmount : tez) => {
  //TODO
  let p_newbets_teamTwo = Map.update(Tezos.get_sender(), Some(pPreviousAmount + Tezos.get_amount()), p_requestedEventBets.bets_teamTwo);
  return [p_newbets_teamTwo, p_requestedEventBets.bets_teamTwo_index]
};

const add_bet_teamTwoAmountToNewUser = (p_requestedEventBets : Types.event_bets) => {
  //TODO
  let p_newbets_teamTwo = Map.add((Tezos.get_sender()), (Tezos.get_amount()), p_requestedEventBets.bets_teamTwo);
  let p_newbets_teamTwo_index = p_requestedEventBets.bets_teamTwo_index + 1n;
  return [p_newbets_teamTwo, p_newbets_teamTwo_index]
};

const add_bet_teamTwo = (p_requestedEventBets : Types.event_bets) : Types.event_bets => {
  //TODO
  let [newbets_teamTwo, newbets_teamTwo_index] = match ((Map.find_opt(Tezos.get_sender(), p_requestedEventBets.bets_teamTwo))) {
    when(Some(prevAmount)): add_bet_teamTwo_amount_to_existing_user(p_requestedEventBets, prevAmount);
    when(None()): add_bet_teamTwoAmountToNewUser(p_requestedEventBets);
  };
  let newbets_teamTwo_total : tez = p_requestedEventBets.bets_teamTwo_total + Tezos.get_amount();
  let r_updatedEvent : Types.event_bets = { ...p_requestedEventBets,
    bets_teamTwo : newbets_teamTwo,
    bets_teamTwo_index : newbets_teamTwo_index,
    bets_teamTwo_total : newbets_teamTwo_total
  };
  return r_updatedEvent
};

@entry
const addBet = ([p_requested_event_id, team_one_bet] : [nat, bool], s : Types.storage) : Types.return_ => {
  Assert.notManagerNorOracle (Tezos.get_sender(), s.manager, s.oracle_address);
  Assert.noTez (Tezos.get_amount());
  Assert.tezLowerThanMin (Tezos.get_amount(), s.bet_config.min_bet_amount);
  let requested_event = match (Big_map.find_opt(p_requested_event_id, s.events)) {
    when(Some(event)): event;
    when(None()): failwith(Errors.no_event_id);
  };
  Assert.bettingNotFinalized (requested_event.gameStatus);
  Assert.bettingBeforePeriodStart (requested_event.start_bet_time);
  Assert.bettingAfterPeriodEnd (requested_event.closed_bet_time);
  let requested_event_bets = match (Big_map.find_opt(p_requested_event_id, s.events_bets)) {
    when(Some(event)): event;
    when(None()): failwith(Errors.no_event_bets);
  };
  if (team_one_bet)
    {
      let updated_bet_event = add_bet_teamOne(requested_event_bets);
      let new_events_map = Big_map.update(p_requested_event_id, (Some(updated_bet_event)), s.events_bets);
      return [list([]), {...s, events_bets : new_events_map}];
    }
  else
    {
      let updated_bet_event = add_bet_teamTwo(requested_event_bets);
      let new_events_map = Big_map.update(p_requested_event_id, (Some(updated_bet_event)), s.events_bets);
      return [list([]), {...s, events_bets : new_events_map}];
    }
  };

const make_transfer_op = (addr : address, value_won : tez, profit_quota : nat) : operation => {
  //TODO
  let quota_to_send = abs(100n - profit_quota);
  let value_to_send = value_won * quota_to_send / 100n;
  let dest_opt = Tezos.get_contract_opt(addr);
  let destination = match(dest_opt) {
    when(None()): failwith("Not found");
    when(Some(ct)): ct;
  };
  return Tezos.transaction(unit, value_to_send, destination)
};

const compose_payment = ( winner_map : map <address, tez>, total_value_bet : tez, total_value_won : tez, profit_quota : nat) : list<operation> => {
  //TODO
  let folded_op_list = ([op_list, [address, bet_amount]] : [list<operation>, [address, tez]]) => {
    let won_reward_percentage = 10000000n * bet_amount / total_value_bet;
    let added_reward =  total_value_won * won_reward_percentage / 10000000n;
    let reward_to_distribute = bet_amount + added_reward;
    let reward_op = make_transfer_op(address, reward_to_distribute, profit_quota);
    return list([reward_op, ...op_list])
  };
  let empty_op_list = list([]);
  return Map.fold(folded_op_list, winner_map, empty_op_list)
};

const refund_bet = (event_bets : Types.event_bets, profit_quota : nat) : list<operation> => {
  //TODO
  let folded_op_list = ([op_list, [address, bet_amount]] : [list<operation>, [address, tez]]) => {
    let refund_op = make_transfer_op(address, bet_amount, profit_quota);
    return list([refund_op, ...op_list])
  };
  let empty_op_list = list([]);
  let teamOne_refund = Map.fold(folded_op_list, event_bets.bets_teamOne, empty_op_list);
  let total_refund = Map.fold(folded_op_list, event_bets.bets_teamTwo, teamOne_refund);
  return total_refund
};

const resolve_team_win = (event_bets : Types.event_bets, is_teamOne_win : bool, profit_quota : nat) : list<operation> => {
  //TODO
  if (event_bets.bets_teamOne_total == 0mutez || event_bets.bets_teamTwo_total == 0mutez )
    {
      return refund_bet(event_bets, 0n)
    }
  else
    if (is_teamOne_win)
    {
      return compose_payment(event_bets.bets_teamOne, event_bets.bets_teamOne_total, event_bets.bets_teamTwo_total, profit_quota)
    }
    else
    {
      return  compose_payment(event_bets.bets_teamTwo, event_bets.bets_teamTwo_total, event_bets.bets_teamOne_total, profit_quota)
    }
  };

@entry
const finalizeBet = (p_requestedEventId : nat, s : Types.storage) : Types.return_ => {
  //TODO
  Assert.isManager (Tezos.get_sender(), s.manager);
  let requested_event = match ((Big_map.find_opt(p_requestedEventId,s.events))) {
    when(Some(event)): event;
    when(None()): failwith(Errors.no_event_id);
  };
  let _check_is_claimed = assert_with_error((requested_event.is_claimed == false), Errors.event_already_claimed);
  Assert.bettingFinalized (requested_event.gameStatus);
  let event_bets = match ((Big_map.find_opt(p_requestedEventId, s.events_bets))) {
    when(Some(event)): event;
    when(None()): failwith(Errors.no_event_bets);
  };
  Assert.finalizingBeforePeriodEnd(requested_event.endAt);
  let profit_quota = s.bet_config.retained_profit_quota;
  let modified_events = Big_map.update(p_requestedEventId, (Some({...requested_event, is_claimed : true })), s.events);
  let op_list = match(requested_event.gameStatus) {
    when(Ongoing()): failwith(Errors.bet_no_team_outcome);
    when(Team1Win()): resolve_team_win(event_bets, true, profit_quota);
    when(Team2Win()): resolve_team_win(event_bets, false, profit_quota);
    when(Draw()): refund_bet(event_bets, profit_quota);
  };
  return [op_list, {...s, events : modified_events}]
};

@view
const getManager = (_: unit, s: Types.storage) => s.manager;

@view
const getOracleAddress = (_: unit, s: Types.storage) => s.oracle_address;

@view
const getBettingStatus = (_: unit, s: Types.storage) => s.bet_config.is_betting_paused;

@view
const getEventCreationStatus = (_: unit, s: Types.storage) => s.bet_config.is_event_creation_paused;

@view
const retrieveEvent = (p_requestedEventId: nat, s: Types.storage) : Types.event_type =>
  match ((Big_map.find_opt(p_requestedEventId, s.events))) {
    when(Some(event)): event;
    when(None()): failwith(Errors.no_event_id);
  };