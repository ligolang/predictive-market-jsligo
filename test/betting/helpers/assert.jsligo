#import "../../../src/contracts/jsligo/betting/types.jsligo" "Types"
#import "../../../src/contracts/jsligo/betting/main.jsligo" "Betting"
#import "../../../src/contracts/jsligo/betting/callback/main.jsligo" "Callback"

// Assert contract call results; failwith with given string
export const string_failure = (res : test_exec_result, p_expected : string) => {
  let expected = Test.eval (p_expected) ;
  match (res) {
    when(Fail(x)):
      match (x) {
        when(Rejected(y)): assert (Test.michelson_equal (y[0], expected));
        when(Balance_too_low(_)): Test.failwith ("contract failed for an unknown reason");
        when(Other(_)): Test.failwith ("contract failed for an unknown reason");
      };
    when(Success(_)): Test.failwith ("bad price check");
  }
} ;

// Assert contract result is successful
export const tx_success = (res: test_exec_result) : unit =>
  match (res) {
    when(Fail(_)): Test.failwith("Transaction should not fail");
    when(Success(_)): unit;
  };

// Assert Manager parameter with expected result
export const balance = (p_address : address, expected : tez) => {
    let balance_value = Test.get_balance_of_address(p_address);
    assert (balance_value == expected)
};

// Assert Manager parameter with expected result
export const manager = (ctr_taddr : typed_address<parameter_of Betting, Types.storage>, expected : address) => {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value = (ctr_storage.manager);
    assert (ctr_value == expected)
};

// Assert Oracle Address parameter with expected result
export const oracle = (ctr_taddr : typed_address<parameter_of Betting, Types.storage>, expected : address) => {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value = (ctr_storage.oracle_address);
    assert (ctr_value == expected)
};

// Assert is_betting_paused parameter with expected result
export const is_betting_paused = (ctr_taddr : typed_address<parameter_of Betting, Types.storage>, expected : bool) => {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value = (ctr_storage.bet_config.is_betting_paused);
    assert(ctr_value == expected)
};

// Assert isPauseis_event_creation_pausedd parameter with expected result
export const is_event_creation_paused = (ctr_taddr : typed_address<parameter_of Betting, Types.storage>, expected : bool) => {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value = (ctr_storage.bet_config.is_event_creation_paused);
    assert (ctr_value == expected)
};

// Assert Events Map parameter with expected result
export const events_map = (ctr_taddr : typed_address<parameter_of Betting, Types.storage>, expected : big_map<nat, Types.event_type>) => {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value = ctr_storage.events;
    assert (ctr_value == expected)
};

// Assert Events Bets Map parameter with expected result
export const events_bet_map = (ctr_taddr : typed_address<parameter_of Betting, Types.storage>, expected : big_map<nat, Types.event_bets>) => {
    let ctr_storage = Test.get_storage(ctr_taddr);
    let ctr_value = (ctr_storage.events_bets);
    assert (ctr_value == expected)
};

export const event = (taddr : typed_address<parameter_of Callback, Callback.storage>, expected_event : Types.event_type) => {
    let storage = Test.get_storage(taddr);
    assert(storage.name == expected_event.name);
    assert(storage.videogame == expected_event.videogame);
    assert(storage.beginAt == expected_event.beginAt);
    assert(storage.endAt == expected_event.endAt);
    assert(storage.modifiedAt == expected_event.modifiedAt);
    assert(storage.opponents == expected_event.opponents);
    assert(storage.gameStatus == expected_event.gameStatus);
    return unit
};
