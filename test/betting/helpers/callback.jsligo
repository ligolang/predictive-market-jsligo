#import "../../../src/contracts/jsligo/betting/callback/main.jsligo" "Callback"

// (* Some types for readability *)
type taddr = typed_address<parameter_of Callback, Callback.storage>;
type contr = contract<parameter_of Callback>;
type originated = {
    addr: address,
    taddr: taddr,
    contr: contr
};

const plain_timestamp : timestamp = ("1970-01-01T00:00:01Z" as timestamp);

// Base Callback storage
export const base_storage = (bettingAddr : address) : Callback.storage => {return {
    name                : "",
    videogame           : "",
    beginAt            : plain_timestamp + 2048,
    endAt              : plain_timestamp + 4096,
    modifiedAt         : plain_timestamp,
    opponents           : {teamOne : "",teamTwo : ""},
    gameStatus         : Ongoing(),
    start_bet_time      : plain_timestamp + 360,
    closed_bet_time     : plain_timestamp + 3072,
    bets_teamOne       : (Map.empty as map<address, tez>),
    bets_teamOne_index : 0 as nat,
    bets_teamOne_total : 0 as mutez,
    bets_teamTwo       : (Map.empty as map<address, tez>),
    bets_teamTwo_index : 0 as nat,
    bets_teamTwo_total : 0 as mutez,
    meta           : (Map.empty as map<string, bytes>),
    bettingAddr         : bettingAddr
}};

export const originate_from_file = (initial_storage : Callback.storage) : originated => {
    let betting_path           = "../../../src/contracts/jsligo/betting/callback/main.jsligo";
    let iTres                  = Test.run( (x : Callback.storage) => x, initial_storage);
    let [callback_addr, _c, _n]  = Test.originate_from_file(betting_path, iTres, 0 as mutez);
    let callback_taddress      = (Test.cast_address(callback_addr) as typed_address<parameter_of Callback, Callback.storage>);
    let callback_contract      = Test.to_contract (callback_taddress);
    return {
        contr : callback_contract,
        taddr : callback_taddress,
        addr : callback_addr
    }
};
