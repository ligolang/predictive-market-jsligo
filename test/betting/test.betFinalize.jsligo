#import "../../src/contracts/jsligo/betting/errors.jsligo" "Errors"
#import "helpers/bootstrap.jsligo" "Bootstrap"
#import "helpers/helper.jsligo" "Helper"
#import "helpers/assert.jsligo" "Assert"
#import "helpers/events.jsligo" "Events"

#import "../common/log.jsligo" "Log"

const _ = Log.describe("[Betting - FinalizeBet] test suite");

// Basic Win Reward Test

const _test_win_basic_team1_should_work = () => {
  //Given
  let [_ba, betting_contract, betting_taddress, elon, _je, alice, bob, mike] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 800000000000mutez);
  Helper.trsc_add_bet_success (betting_contract, bob,   0n, (true  as bool), 800000000000mutez);
  Helper.trsc_add_bet_success (betting_contract, mike,  0n, (false as bool), 800000000000mutez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_team1_win);
  let storage = Test.get_storage(betting_taddress);
  let quota_left = abs(100n - storage.bet_config.retained_profit_quota);
  let expected_alice_balance = Test.get_balance_of_address(alice) + (800000000000mutez + 400000000000mutez) * quota_left / 100n;
  let expected_bob_balance   = Test.get_balance_of_address(bob)   + (800000000000mutez + 400000000000mutez) * quota_left / 100n;
  let expected_mike_balance  = Test.get_balance_of_address(mike);
  //When
  Helper.trsc_finalize_bet_success (betting_contract, elon, 0n);
  //Then
  assert (expected_alice_balance == Test.get_balance_of_address(alice));
  assert (expected_bob_balance   == Test.get_balance_of_address(bob));
  assert (expected_mike_balance  == Test.get_balance_of_address(mike));
  return "OK"
};

// Basic Draw Reward Test
const _test_draw_should_work = () => {
  //Given
  let [_ba, betting_contract, betting_taddress, elon, _je, alice, bob, mike] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 800000000000mutez);
  Helper.trsc_add_bet_success (betting_contract, bob,   0n, (true  as bool), 800000000000mutez);
  Helper.trsc_add_bet_success (betting_contract, mike,  0n, (false as bool), 800000000000mutez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_draw);
  let storage = Test.get_storage(betting_taddress);
  let quota_left = abs(100n - storage.bet_config.retained_profit_quota);
  let expected_alice_balance = Test.get_balance_of_address(alice) + 800000000000mutez * quota_left / 100n;
  let expected_bob_balance   = Test.get_balance_of_address(bob)   + 800000000000mutez * quota_left / 100n;
  let expected_mike_balance  = Test.get_balance_of_address(mike)  + 800000000000mutez * quota_left / 100n;
  //When
  Helper.trsc_finalize_bet_success (betting_contract, elon, 0n);
  //Then
  assert (expected_alice_balance == Test.get_balance_of_address(alice));
  assert (expected_bob_balance   == Test.get_balance_of_address(bob));
  assert (expected_mike_balance  == Test.get_balance_of_address(mike));
  return "OK"
};


// Weighted Win Reward Test
const _test_win_weighted_team1_should_work = () => {
  //Given
  let [_ba, betting_contract, betting_taddress, elon, _je, alice, bob, mike] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 800000000000mutez);
  Helper.trsc_add_bet_success (betting_contract, bob,   0n, (true  as bool), 400000000000mutez);
  Helper.trsc_add_bet_success (betting_contract, mike,  0n, (false as bool), 600000000000mutez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_team1_win);
  let storage = Test.get_storage(betting_taddress);
  let quota_left = abs(100n - storage.bet_config.retained_profit_quota);
  let expected_alice_balance = Test.get_balance_of_address(alice) + (800000000000mutez + 400000000000mutez) * quota_left / 100n;
  let expected_bob_balance   = Test.get_balance_of_address(bob)   + (400000000000mutez + 200000000000mutez) * quota_left / 100n;
  //When
  Helper.trsc_finalize_bet_success (betting_contract, elon, 0n);
  //Then
  let alice_bal_error  = Option.unopt(expected_alice_balance - Test.get_balance_of_address(alice));
  //let alice_bal_error  = match( (expected_alice_balance - Test.get_balance_of_address(alice)), list([
  //  Some: (b: tez) => b,
  //  None: ()   => failwith("Weighted Win Reward Test Fails")
  //]));
  let bob_bal_error  = Option.unopt(expected_bob_balance - Test.get_balance_of_address(bob));
  //let bob_bal_error  = match() (expected_bob_balance - Test.get_balance_of_address(bob)), list([
  //  Some: (b: tez) => b,
  //  None: ()   => failwith("Weighted Win Reward Test Fails")
  //]));
  assert (alice_bal_error < 1tez);
  assert (bob_bal_error   < 1tez);
  return "OK"
};


//  Weighted Win Reward Test Team 2
const _test_win_weighted_team2_should_work = () => {
  //Given
  let [_ba, betting_contract, betting_taddress, elon, _je, alice, bob, mike] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 30000 as tez);
  Helper.trsc_add_bet_success (betting_contract, mike,  0n, (false as bool), 60000 as tez);
  Helper.trsc_add_bet_success (betting_contract, bob,   0n, (false as bool), 30000 as tez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_team2_win);
  let storage = Test.get_storage(betting_taddress);
  let quota_left = abs(100n - storage.bet_config.retained_profit_quota);
  let expected_mike_balance = Test.get_balance_of_address(mike) + (60000tez + 20000tez) * quota_left / 100n;
  let expected_bob_balance = Test.get_balance_of_address(bob) + (30000tez + 10000tez) * quota_left / 100n;
  //When
  Helper.trsc_finalize_bet_success (betting_contract, elon, 0n);
  //Then
  let mike_bal_error  = Option.unopt(expected_mike_balance - Test.get_balance_of_address(mike));
  //let mike_bal_error  = match( (expected_mike_balance - Test.get_balance_of_address(mike)), list([
  //  Some: (b: tez) => b,
  //  None: () => failwith("Double Weighted Win Reward Test Team 2 Fails")
  //]));
  let bob_bal_error  =Option.unopt(expected_bob_balance - Test.get_balance_of_address(bob));
  //let bob_bal_error  = match((expected_bob_balance - Test.get_balance_of_address(bob)), list([
  //  Some: (b: tez) => b,
  //  None: () => failwith("Double Weighted Win Reward Test Team 2 Fails")
  //]));
  assert (mike_bal_error < 1tez);
  assert (bob_bal_error < 1tez);
  return "OK"
};


// Finalizing a bet two times should fail
const _test_finalizing_bet_two_times_should_fail = () => {
  //Given
  let [_ba, betting_contract, _bt, elon, _je, alice, _b, mike] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 30000 as tez);
  Helper.trsc_add_bet_success (betting_contract, mike,  0n, (false as bool), 60000 as tez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_team1_win);
  //When
  let ret = Helper.trsc_update_event (betting_contract, elon, 0n, Events.finalized_event_team1_win);
  //Then
  Assert.string_failure(ret, Errors.bet_finished);
  return "OK"
};


// Claiming a bet two times should fail

const _test_claim_bet_two_times_should_fail = () => {
  //Given
  let [_be, betting_contract, _bt, elon, _je, alice, _b, mike] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 30000 as tez);
  Helper.trsc_add_bet_success (betting_contract, mike,  0n, (false as bool), 60000 as tez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_team1_win);
  Helper.trsc_finalize_bet_success (betting_contract, elon, 0n);
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, elon, 0n);
  //Then
  Assert.string_failure(ret, Errors.event_already_claimed);
  return "OK"
};


// Finalising a bet without outcome should fail
const _test_finalizing_bet_without_outcome_should_fail = () => {
  //Given
  let [_be, betting_contract, _bt, elon, _je, alice, _b, mike] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 1000 as tez);
  Helper.trsc_add_bet_success (betting_contract, mike,  0n, (false as bool), 1000 as tez);
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, elon, 0n);
  //Then
  Assert.string_failure(ret, Errors.bet_not_finished);
  return "OK"
};


// Finalising a wrong Id
const _test_finalizing_bet_with_wrong_id_should_fail = () => {
  //Given
  let [_be, betting_contract, _bt, elon, _je, alice, _b, mike] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 1000 as tez);
  Helper.trsc_add_bet_success (betting_contract, mike,  0n, (false as bool), 1000 as tez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_team1_win);
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, elon, 1n);
  //Then
  Assert.string_failure(ret, Errors.no_event_id);
  return "OK"
};


// Winning without counterparty should refund
const _test_winning_without_counterparty_refund_should_work = () => {
  //Given
  let [_be, betting_contract, _betting_taddress, elon, _je, alice, _b, _j] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 1000tez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_team1_win);
  let expected_alice_balance = Test.get_balance_of_address(alice) + 1000tez;
  //When
  Helper.trsc_finalize_bet_success (betting_contract, elon, 0n);
  //Then
  assert (expected_alice_balance == Test.get_balance_of_address(alice));
  return "OK"
};


// Finalising an event not finished should fail
const _test_finalizing_event_not_finished_should_fail = () => {
  //Given
  let [_, betting_contract, _bt, elon, _je, alice, _b, mike] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 1000 as tez);
  Helper.trsc_add_bet_success (betting_contract, mike,  0n, (false as bool), 1000 as tez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_too_long);
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, elon, 0n);
  //Then
  Assert.string_failure(ret, Errors.bet_period_not_finished);
  return "OK"
};


// Finalising an event without manager rights should fail
const _test_finalizing_event_without_manager_rights_should_fail = () => {
  //Given
  let [_betting_address, betting_contract, _bt, elon, _je, alice, _b, _j] = Bootstrap.bootstrap();
  Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
  Helper.trsc_add_bet_success (betting_contract, alice, 0n, (true  as bool), 1000 as tez);
  Helper.trsc_update_event_success (betting_contract, elon, 0n, Events.finalized_event_too_long);
  //When
  let ret = Helper.trsc_finalize_bet (betting_contract, alice, 0n);
  //Then
  Assert.string_failure(ret, Errors.not_manager);
  return "OK"
};

const test_win_basic_team1_should_work = _test_win_basic_team1_should_work();
const test_draw_should_work = _test_draw_should_work();
const test_win_weighted_team1_should_work = _test_win_weighted_team1_should_work();
const test_win_weighted_team2_should_work = _test_win_weighted_team2_should_work();
const test_claim_bet_two_times_should_fail = _test_claim_bet_two_times_should_fail();
const test_finalizing_bet_without_outcome_should_fail = _test_finalizing_bet_without_outcome_should_fail();
const test_finalizing_bet_with_wrong_id_should_fail = _test_finalizing_bet_with_wrong_id_should_fail();
const test_winning_without_counterparty_refund_should_work = _test_winning_without_counterparty_refund_should_work();
const test_finalizing_event_not_finished_should_fail = _test_finalizing_event_not_finished_should_fail();
const test_finalizing_event_without_manager_rights_should_fail = _test_finalizing_event_without_manager_rights_should_fail();