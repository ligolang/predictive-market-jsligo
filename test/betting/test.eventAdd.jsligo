#import "../../src/contracts/jsligo/betting/errors.jsligo" "Errors"
#import "helpers/bootstrap.jsligo" "Bootstrap"
#import "helpers/helper.jsligo" "Helper"
#import "helpers/assert.jsligo" "Assert"
#import "helpers/events.jsligo" "Events"

#import "../common/log.jsligo" "Log"

const _ = Log.describe("[Betting - EventAdd] test suite");

const _test_add_event_by_manager_should_work = () => {
    let [_betting_address, betting_contract, betting_taddress, elon, _jeff, _alice, _b, _j] = Bootstrap.bootstrap();
    Assert.events_map(betting_taddress, Helper.empty_map);
    // Adding an Event from Manager
    Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
    Assert.events_map(betting_taddress, Helper.one_event_map);
    return "OK"
};

const _test_add_event_by_oracle_should_work = () => {
    let [_betting_address, betting_contract, betting_taddress, _elon, jeff, _alice, _b, _j] = Bootstrap.bootstrap();
    Assert.events_map(betting_taddress, Helper.empty_map);
    // Adding an Event from Oracle
    Helper.trsc_add_event_success (betting_contract, jeff, Events.eventype_to_addeventparam(Events.primary_event));
    Assert.events_map(betting_taddress, Helper.one_event_map);
    return "OK"
};

const _test_add_event_unauthorized_should_not_work = () => {
    let [_betting_address, betting_contract, betting_taddress, _elon, _jeff, alice, _b, _j] = Bootstrap.bootstrap();
    Assert.events_map(betting_taddress, Helper.empty_map);
    // Adding an Event from unauthorized address
    let result = Helper.trsc_add_event (betting_contract, alice, Events.eventype_to_addeventparam(Events.primary_event));
    Assert.string_failure(result, Errors.not_manager_nor_oracle);
    Assert.events_map(betting_taddress, Helper.empty_map);
    return "OK"
};

const _test_add_two_events_by_manager_and_oracle_should_work = () => {
    let [_betting_address, betting_contract, betting_taddress, elon, jeff, _alice, _b, _j] = Bootstrap.bootstrap();
    Assert.events_map(betting_taddress, Helper.empty_map);
    // Adding an Event from Manager
    Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
    Assert.events_map(betting_taddress, Helper.one_event_map);
    // Adding an Event from Oracle
    Helper.trsc_add_event_success (betting_contract, jeff, Events.eventype_to_addeventparam(Events.primary_event));
    Assert.events_map(betting_taddress, Helper.double_event_map);
    return "OK"
};

const test_add_event_by_manager_should_work = _test_add_event_by_manager_should_work();
const test_add_event_by_oracle_should_work = _test_add_event_by_oracle_should_work();
const test_add_event_unauthorized_should_not_work = _test_add_event_unauthorized_should_not_work();
const test_add_two_events_by_manager_and_oracle_should_work = _test_add_two_events_by_manager_and_oracle_should_work();
