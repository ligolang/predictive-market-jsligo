#import "../../src/contracts/jsligo/betting/errors.jsligo" "Errors"
#import "helpers/bootstrap.jsligo" "Bootstrap"
#import "helpers/helper.jsligo" "Helper"
#import "helpers/assert.jsligo" "Assert"
#import "helpers/events.jsligo" "Events"

#import "../common/log.jsligo" "Log"

const _ = Log.describe("[Betting - EventGet] test suite")

const _test_callback_contract_from_manager_should_work = () => {
    let [betting_address, betting_contract, betting_taddress, elon, _je, _a, _b, _j] = Bootstrap.bootstrap();
    Assert.events_map(betting_taddress, Helper.empty_map);
    let originated_betting_callback = Bootstrap.bootstrap_betting_callback(betting_address);

    Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
    Assert.events_map(betting_taddress, Helper.one_event_map);

    Helper.trsc_get_event_success (betting_contract, elon, originated_betting_callback.addr, 0 as nat);
    Assert.event(originated_betting_callback.taddr, Events.primary_event);
    return "OK"
};

const _test_callback_contract_from_user_should_work = () => {
    let [betting_address, betting_contract, betting_taddress, elon, _je, alice, _b, _j] = Bootstrap.bootstrap();
    Assert.events_map(betting_taddress, Helper.empty_map);
    let originated_betting_callback = Bootstrap.bootstrap_betting_callback(betting_address);

    Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
    Assert.events_map(betting_taddress, Helper.one_event_map);

    Helper.trsc_get_event_success (betting_contract, alice, originated_betting_callback.addr, 0 as nat);
    Assert.event(originated_betting_callback.taddr, Events.primary_event);
    return "OK"
};

const _test_callback_contract_no_event_should_not_work = () => {
    let [betting_address, betting_contract, betting_taddress, elon, _je, _a, _b, _j] = Bootstrap.bootstrap();
    Assert.events_map(betting_taddress, Helper.empty_map);
    let originated_betting_callback = Bootstrap.bootstrap_betting_callback(betting_address);

    Helper.trsc_add_event_success (betting_contract, elon, Events.eventype_to_addeventparam(Events.primary_event));
    Assert.events_map(betting_taddress, Helper.one_event_map);

    let ret = Helper.trsc_get_event (betting_contract, elon, originated_betting_callback.addr, 3 as nat);
    Assert.string_failure(ret, Errors.no_event_id);
    return "OK"
};

const test_callback_contract_from_manager_should_work = _test_callback_contract_from_manager_should_work();
const test_callback_contract_from_user_should_work = _test_callback_contract_from_user_should_work();
const test_callback_contract_no_event_should_not_work = _test_callback_contract_no_event_should_not_work();