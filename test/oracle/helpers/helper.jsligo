#import "../../../src/contracts/jsligo/oracle/types.jsligo" "Types"
#import "../../../src/contracts/jsligo/oracle/main.jsligo" "Oracle"
#import "bootstrap.jsligo" "Bootstrap"
#import "assert.jsligo" "Assert"

//  VARIABLES

export const empty_map : map<nat, Types.event_type> = (Map.empty as map<nat, Types.event_type>);

export const one_event_map : map<nat, Types.event_type> = Map.literal(list([
    [0 as nat, Bootstrap.primary_event]
    ]));
export const double_event_map : map<nat, Types.event_type> = Map.literal(list([
    [0 as nat, Bootstrap.primary_event],
    [1 as nat, Bootstrap.primary_event]
    ]));
export const three_event_map : map<nat, Types.event_type> = Map.literal(list([
    [0 as nat, Bootstrap.primary_event],
    [1 as nat, Bootstrap.primary_event],
    [2 as nat, Bootstrap.primary_event]
    ]));

//  FUNCTIONS

export const trsc_change_manager = (contr, from_, new) => {
    Test.set_source(from_);
    let result = Test.transfer_to_contract(contr, (ChangeManager (new) as parameter_of Oracle), 0 as mutez);
    return result
};

export const trsc_change_manager_success = (contr : contract<parameter_of Oracle>, from_ : address, new : address) => {
  return Assert.tx_success (trsc_change_manager(contr, from_, new))
};

export const trsc_change_signer = (contr : contract<parameter_of Oracle>, from_ : address, new : address) => {
    let _= Test.set_source(from_);
    let result = Test.transfer_to_contract(contr, (ChangeSigner (new) as parameter_of Oracle), 0 as mutez);
    return result
};

export const trsc_change_signer_success = (contr : contract<parameter_of Oracle>, from_ : address, new : address) => {
  return Assert.tx_success (trsc_change_signer(contr, from_, new))
};

export const trsc_switch_pause = (contr : contract<parameter_of Oracle>, from_ : address) => {
    let _= Test.set_source (from_);
    let result = Test.transfer_to_contract(contr, (SwitchPause() as parameter_of Oracle), 0 as mutez);
    return result
};

export const trsc_switch_pause_success = (contr : contract<parameter_of Oracle>, from_ : address) => {
  return Assert.tx_success (trsc_switch_pause(contr, from_))
};

export const trsc_add_event = (contr : contract<parameter_of Oracle>, from_ : address, event : Types.event_type) => {
    let _= Test.set_source (from_);
    let result = Test.transfer_to_contract(contr, (AddEvent (event) as parameter_of Oracle), 0 as mutez);
    return result
};

export const trsc_add_event_success = (contr : contract<parameter_of Oracle>, from_ : address, event : Types.event_type) => {
  return Assert.tx_success (trsc_add_event(contr, from_, event))
};

export const trsc_update_event = (contr : contract<parameter_of Oracle>, from_ : address, event_num : nat, event : Types.event_type) => {
    let _= Test.set_source (from_);

    let result = Test.transfer_to_contract(contr, (UpdateEvent (event_num, event) as parameter_of Oracle), 0 as mutez);
    return result
};

export const trsc_update_event_success = (contr : contract<parameter_of Oracle>, from_ : address, event_num : nat, event : Types.event_type) => {
  return Assert.tx_success (trsc_update_event(contr, from_, event_num, event))
};

export const trsc_get_event = (contr : contract<parameter_of Oracle>, from_ : address, cbk_addr : address, event_num : nat) => {
    let _= Test.set_source (from_);
    let result_cbk = Test.transfer_to_contract(contr, (GetEvent (event_num, cbk_addr) as parameter_of Oracle), 0 as mutez);
    return result_cbk
};

export const trsc_get_event_success = (contr : contract<parameter_of Oracle>, from_ : address, cbk_addr : address, event_num : nat) => {
  return Assert.tx_success (trsc_get_event(contr, from_, cbk_addr, event_num))
};